library(oxcAAR)
quickSetupOxcal()
## Execute custom OxCal code
# One can also use the package to execute OxCal code (in CQL2) from within R, and import the results back into the workspace.
# To use a CQL2 script as string variable:
knitr::opts_chunk$set(cache=TRUE)
my_oxcal_code <- ' Plot()
{
Sequence("Sequence1")
{
Boundary("Begin");
Phase("Phase1")
{
R_Date("Lab-1",5000,25);
R_Date("Lab-2",4900,37);
};
Boundary("Between");
Phase("Phase2")
{
R_Date("Lab-3",4800,43);
};
Boundary("End");
};
};'
my_result_file <- executeOxcalScript(my_oxcal_code)
my_result_text <- readOxcalOutput(my_result_file)
my_result_data <- parseFullOxcalOutput(my_result_text)
str(my_result_data)
# or get the whole output of Oxcal as object:
my_result_data <- parseFullOxcalOutput(my_result_text)
str(my_result_data)
plot(my_result_data)
# then parse the result to a 'standard' oxcAAR object:
my_result_data <- parseOxcalOutput(my_result_text)
str(my_result_data)
print(my_result_data)
plot(my_result_data)
## color palettes
#https://rdocumentation.org/packages/scales/versions/0.4.1
install.packages('scales')
#https://CRAN.R-project.org/package=pals
#https://kwstat.github.io/pals/
install.packages("pals")
library(scales)
library(pals)
pals::pal.bands(pals::ocean.thermal, viridis::plasma, viridis::magma,pals::ocean.matter, pals::ocean.oxy, viridis::inferno, viridis::viridis, pals::parula , pals::ocean.haline, viridis::cividis)
pal.bands(coolwarm, cividis, parula, cubicl)
pal.bands(magma, inferno, plasma, viridis)
show_col(magma(13))
pal.bands(ocean.haline, ocean.algae, ocean.deep, ocean.solar, ocean.thermal, ocean.matter, ocean.oxy, ocean.phase)
show_col(ocean.haline(20))
library(scales)
library(pals)
pals::pal.bands(pals::ocean.thermal, viridis::plasma, viridis::magma,pals::ocean.matter, pals::ocean.oxy, viridis::inferno, viridis::viridis, pals::parula , pals::ocean.haline, viridis::cividis)
pal.bands(ocean.haline, ocean.algae, ocean.deep, ocean.solar, ocean.thermal, ocean.matter, ocean.oxy, ocean.phase)
show_col(ocean.haline(20))
print_col(cubicl(26))
show_col(viridis(15))
pal.bands(ocean.haline, ocean.algae, ocean.deep, ocean.solar, ocean.thermal, ocean.matter, ocean.oxy, ocean.phase)
pal.bands(coolwarm, cividis, parula, cubicl)
pal.bands(magma, inferno, plasma, viridis)
show_col(plasma(9))
pals::pal.bands(pals::ocean.thermal, viridis::plasma, viridis::magma,pals::ocean.matter, pals::ocean.oxy, viridis::inferno, viridis::viridis, pals::parula , pals::ocean.haline, viridis::cividis)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/polynesian-outliers-voyaging.git",
destdir = "~/Documents/Github/"
)
rrtools::use_compendium("polynesian-outliers-voyaging")
rrtools::use_compendium("~/Documents/Github/polynesian-outliers-voyaging")
install.packages("devtools")
install.packages("devtools")
install.packages("usethis")
devtools::install_github("benmarwick/rrtools")
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/polynesian-outliers-voyaging.git",
destdir = "~/Documents/Github/"
)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/polynesian-outliers-voyaging.git",
destdir = "~/Documents/Github/"
)
library(usethis)
library(devtools)
library(rrtools)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/polynesian-outliers-voyaging.git",
destdir = "~/Documents/Github/polynesian-outliers-voyaging"
)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/polynesian-outliers-voyaging.git",
destdir = "~/Documents/Github/"
)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/polynesianoutliersvoyaging.git",
destdir = "~/Documents/Github/"
)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/polynesianoutliersvoyaging.git",
destdir = "~/Documents/Github/"
)
usethis::use_mit_license(copyright_holder = "Aymeric Hermann")
library(usethis)
library(devtools)
library(rrtools)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/hane-stone-tools.git",
destdir = "~/Documents/Github/"
)
rrtools::use_compendium("~/Documents/Github/hane-stone-tools")
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/hanestonetools.git",
destdir = "~/Documents/Github/"
)
#setwd("~/Github")
#rrtools::use_compendium("repos-name")
usethis::create_from_github(
"https://github.com/tupuni/hanestonetools.git",
destdir = "~/Documents/Github/"
)
rrtools::use_compendium("~/Documents/Github/hanestonetools")
rrtools::use_readme_rmd()
rrtools::use_readme_rmd()
library(scales)
library(pals)
pals::pal.bands(pals::ocean.thermal, viridis::plasma, viridis::magma,pals::ocean.matter, pals::ocean.oxy, viridis::inferno, viridis::viridis, pals::parula , pals::ocean.haline, viridis::cividis)
pal.bands(coolwarm, cividis, parula, cubicl)
show_col(cubicl(6))
show_col(cubicl(12))
pal.bands(ocean.haline, ocean.algae, ocean.deep, ocean.solar, ocean.thermal, ocean.matter, ocean.oxy, ocean.phase)
library(wesanderson)
install.packages("wesanderson")
library(wesanderson)
wes_palette(name, n, type = c("discrete", "continuous"))
names(wes_palettes)
wes_palette(FantasticFox1, n, type = c("discrete", "continuous"))
wes_palette(FantasticFox1, n, type = c("continuous"))
wes_palette("FantasticFox1", n, type = c("continuous"))
wes_palette("FantasticFox1", 12, type = c("continuous"))
wes_palette("FantasticFox1", 12, type = c("continuous","discrete"))
wes_palette("FantasticFox1", 12, type = c("discrete"))
wes_palette("FantasticFox1", type = c("discrete"))
wes_palette("FantasticFox1", 12, type = c("continuous"))
names(wes_palettes)
wes_palette("Darjeeling1", type = c("discrete"))
wes_palette("Darjeeling2", type = c("discrete"))
wes_palette("Chevalier1", type = c("discrete"))
wes_palette("Royal1", type = c("discrete"))
wes_palette("Zissou1", type = c("discrete"))
wes_palette("Zissou1", 12, type = c("continuous"))
help(wes_palette)
wes_palette(21, name = "Zissou1", type = "continuous")
pal <- wes_palette(21, name = "Zissou1", type = "continuous")
pal
c(pal)
library(qpdf)
setwd(dir = "~/Desktop/Smash/Rue Pasteur House")
qpdf::pdf_compress(                             # compresse le pdf
input = "DPE.pdf",                   # fichier Ã  traiter
output = "DPE-compress.pdf")
library(tidyverse)
library(RSQLite)
path_to_georoc <- "~/Documents/Github/georoc-data/georoc.sqlite"
path_to_pofatu <- "~/Documents/Github/pofatu-data/dist/pofatu.sqlite"
georoc_db <- dbConnect(RSQLite::SQLite(), path_to_georoc)
pofatu_db <- dbConnect(RSQLite::SQLite(), path_to_pofatu)
pofatu <- dbGetQuery(
pofatu_db,
"SELECT * FROM (
SELECT s.id AS Sample, s.sample_category, s.location_region,
s.location_subregion, s.location_latitude AS lat, s.location_longitude AS long,
max(CASE WHEN m.parameter='P2O5 [%]' then m.value END) AS 'P2O5',
max(CASE WHEN m.parameter='Sr [ppm]' then m.value END) AS 'Sr'
FROM 'samples.csv' AS s JOIN 'measurements.csv' AS m ON s.id=m.sample_id
WHERE m.parameter IN ('P2O5 [%]', 'Sr [ppm]')
GROUP BY sample_id) AS POFATU WHERE
(P2O5 > 2 AND Sr > 2000)")
georoc <- dbGetQuery(georoc_db,
"SELECT TECTONIC_SETTING, id AS sample, file_id, LOCATION, LAND_OR_SEA,
ROCK_TYPE, `P2O5(WT%)` AS P2O5, `SR(PPM)` AS Sr,
LATITUDE_MAX AS lat, LONGITUDE_MAX AS long
FROM 'sample'
WHERE `P2O5(WT%)` > 2 AND `SR(PPM)` > 2000")
georoc %>% dplyr::filter(long > 160 | long < 0 & long > -170 ) %>%
group_by(file_id) %>% tally() %>% print(n=82)
s_georoc <- georoc %>% dplyr::filter(grepl("ZEALAND", file_id) |
grepl("SAMOAN", file_id) |
grepl("HAWAII", file_id))
s_georoc[,"sample"]
refs <- dbGetQuery(georoc_db,
"SELECT c.sample_id AS sample, r.reference AS ref
FROM 'citation' AS c, 'reference' AS r
WHERE r.id = c.reference_id AND
(c.sample_id= 1127173 OR
c.sample_id = 1127174 OR
c.sample_id = 1127175 OR
c.sample_id = 1127176 OR
c.sample_id = 157650 OR
c.sample_id = 414666 OR
c.sample_id = 414667 OR
c.sample_id = 132216 OR
c.sample_id = 30496-79-4 OR
c.sample_id = '79707-ALIA-DR108-01')")
res <- left_join(refs, s_georoc)
View(res)
res[,ref]
res[,"ref"]
library(here)
here::i_am("review_weisler2023.R")
here::i_am("JPA_Weisler et al")
